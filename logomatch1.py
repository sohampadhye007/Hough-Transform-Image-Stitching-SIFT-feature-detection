# -*- coding: utf-8 -*-
"""logoMatch1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s9VLT6OJ78LKTS4oApzrUoh4l5hv0LmW

#(M22RM007-Soham Padhye)
# Create SIFT keypoints detector class
"""

import cv2
from google.colab.patches import cv2_imshow

class LogoDetector:
    def __init__(self, scene_image, reference_gallery):
        self.reference_gallery = reference_gallery
        self.sift = cv2.xfeatures2d.SIFT_create()
        self.reference_features = []
        for reference_logo in self.reference_gallery:
            reference_image = cv2.imread(reference_logo)
            kp, des = self.sift.detectAndCompute(reference_image, None)
            self.reference_features.append((reference_logo, des))
        self.FLANN_INDEX_KDTREE = 0
        self.index_params = dict(algorithm=self.FLANN_INDEX_KDTREE, trees=5)
        self.search_params = dict(checks=50)
        self.flann = cv2.FlannBasedMatcher(self.index_params, self.search_params)

    def find_best_match(self):
        kp, des = self.sift.detectAndCompute(scene_image, None)
        best_match_score = 0
        best_match_logo = None
        for reference_logo, reference_des in self.reference_features:
            matches = self.flann.knnMatch(des, reference_des, k=2)
            good_matches = []
            for m, n in matches:
                if m.distance < 0.5 * n.distance:
                    good_matches.append(m)
            match_score = len(good_matches) / len(kp)
            if match_score > best_match_score:
                best_match_score = match_score
                best_match_logo = reference_logo
        return best_match_logo

    def draw_best_match(self):
        best_match_logo = self.find_best_match()
        reference_image = cv2.imread(best_match_logo)
        reference_kp, reference_des = self.sift.detectAndCompute(reference_image, None)
        kp, des = self.sift.detectAndCompute(scene_image, None)
        matches = self.flann.knnMatch(des, reference_des, k=2)
        good_matches = []
        for m, n in matches:
            if m.distance < 0.5 * n.distance:
                good_matches.append(m)
        scene_matches = cv2.drawMatches(scene_image, kp, reference_image, reference_kp, good_matches, None)
        cv2_imshow(scene_matches)

"""# Create class instance for detecting Starbucks Logo"""

# Create a StarbucksLogoDetector object
scene_image = cv2.imread("starbucks.jpeg")

reference_gallery=["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg"]

starbucks_detector = LogoDetector(scene_image,reference_gallery)

# Find and print the best matching reference logo for the Starbucks image
starbucks_best_match = starbucks_detector.find_best_match()
print("The business brand logo in the Starbucks image is:", starbucks_best_match)

# Draw the best matching reference logo on the Starbucks image
starbucks_detector.draw_best_match()

"""# Create class instance for detecting Levi's Logo"""

# Create a LevisLogoDetector object
scene_image = cv2.imread("scene.jpg")

reference_gallery=["hp.jpg", "kfc.jpg", "levis.jpg", "lg.jpg", "nescafe.jpg",
                   "shell.jpg", "spar.jpg", "tacobell.jpg", "tommyhilfiger.jpg", "umbro.jpg"]

levis_detector = LogoDetector(scene_image,reference_gallery)

# Find and print the best matching reference logo for the Levis image
levis_best_match = levis_detector.find_best_match()
print("The business brand logo in the Levis image is:", levis_best_match)

# Draw the best matching reference logo on the Levis image
levis_detector.draw_best_match()

"""# Create class instance for custom image taken by mobile camera(Starbucks scene image)"""

# Create a StarbucksLogoDetector object
scene_image = cv2.imread("scene_airport.jpg")
scene_image=cv2.resize(scene_image,(1000,812))


reference_gallery=["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg"]

starbucks_detector = LogoDetector(scene_image,reference_gallery)

# Find and print the best matching reference logo for the Starbucks image
starbucks_best_match = starbucks_detector.find_best_match()
print("The business brand logo in the Starbucks image is:", starbucks_best_match)

# Draw the best matching reference logo on the Starbucks image
starbucks_detector.draw_best_match()

"""#Checking one more scene image for logo matching
#Note-I have taken this image on airport
"""

scene_image = cv2.imread("Scene_custom.jpg")
scene_image=cv2.resize(scene_image,(1000,812))
cv2_imshow(scene_image)

# Create a Custom LogoDetector object
scene_image = cv2.imread("Scene_custom.jpg")
scene_image=cv2.resize(scene_image,(1000,812))


reference_gallery=["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg","Indigo.png"]

custom_scene_detector = LogoDetector(scene_image,reference_gallery)

# Find and print the best matching reference logo for the Starbucks image
custom_best_match = custom_scene_detector.find_best_match()
print("The business brand logo in the Starbucks image is:", custom_best_match)

# Draw the best matching reference logo on the Starbucks image
custom_scene_detector.draw_best_match()

