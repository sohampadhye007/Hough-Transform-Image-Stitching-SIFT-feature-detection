# -*- coding: utf-8 -*-
"""logoMatch2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqaVU7wNUBlJNzXHK4gvomEudISt0bVo

#(M22RM007-Soham Padhye)
#Using ORB to find the keypoints in the images and using Brute-Force matcher for matching the descriptors
"""

import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

class LogoMatcher:
    def __init__(self, scene_img, ref_logos):
        #Take the image from path
        self.ref_logos = ref_logos
        #Create the ORB object
        self.orb = cv2.ORB_create()
        #Create ORB BFmatcher
        self.bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
        self.ref_dict = self._create_ref_dict()

    def _create_ref_dict(self):
        #create empty dictonary for storing logos' keypoints and descriptors
        ref_dict = {}
        for logo_path in self.ref_logos:
            logo_img = cv2.imread(logo_path)
            #detect and compute the keypoints and descriptors
            kp, des = self.orb.detectAndCompute(logo_img, None)
            #add result to dictonary
            ref_dict[logo_path] = (kp, des)
        return ref_dict

    def match_logo(self):
        #detect and compute the keypoints and descriptors
        kp_scene, des_scene = self.orb.detectAndCompute(scene_img, None)
        #Initiate max matches with zero value and update it using for loop to get best match
        max_matches = 0
        best_logo = None
        best_matches = None

        #Update the best matching logo
        for logo_path, (kp_ref, des_ref) in self.ref_dict.items():
            matches = self.bf.match(des_ref, des_scene)
            num_matches = len(matches)
            #If current logo have matches greater than previous update the max_match variable that will be our output 
            if num_matches > max_matches:
                max_matches = num_matches
                best_logo = logo_path
                best_matches = matches

        # Draw the matching keypoints between the scene image and the best matching reference logo
        ref_img = cv2.imread(best_logo)
        img_matches = cv2.drawMatches(ref_img, self.ref_dict[best_logo][0], scene_img, kp_scene, best_matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
        #Displaying the image using matplotLib
        plt.imshow(cv2.cvtColor(img_matches, cv2.COLOR_BGR2RGB))
        plt.title('Matching keypoints between best logo and scene image')
        plt.show()

        # Display the best matching logo and the number of matches
        print(f"Best matching logo for scene: {best_logo}")
        print("Number of matches:", max_matches)

"""# Matching Starbucks logo"""

# Read the scene image
scene_img = cv2.imread("starbucks.jpeg")
gallery =["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg"]
Sbucks_matcher = LogoMatcher(scene_img, gallery)
Sbucks_matcher.match_logo()

"""#Matching Levi's logo without considering Region of Interest"""

scene_img = cv2.imread("scene.jpg")
# Create an instance for Levi's
levis_ref_logos = ["hp.jpg", "kfc.jpg", "levis.jpg", "lg.jpg", "nescafe.jpg",
                   "shell.jpg", "spar.jpg", "tacobell.jpg", "tommyhilfiger.jpg", "umbro.jpg"]
levis_matcher = LogoMatcher(scene_img, levis_ref_logos)
levis_matcher.match_logo()

"""#Matching Levi's logo byconsidering Region of Interest"""

scene_image = cv2.imread("scene.jpg")

#define the region of interest top left coordinates are origin of the image
x, y, w, h = 0, 100, 600, 300  # x, y are the top-left corner coordinates, w and h are the width and height of the ROI

# Crop the image to the ROI
scene_img = scene_image[y:y+h, x:x+w]
# Create an instance for Levi's
levis_ref_logos = ["hp.jpg", "kfc.jpg", "levis.jpg", "lg.jpg", "nescafe.jpg",
                   "shell.jpg", "spar.jpg", "tacobell.jpg", "tommyhilfiger.jpg", "umbro.jpg"]
levis_matcher = LogoMatcher(scene_img, levis_ref_logos)
levis_matcher.match_logo()

"""# Checking custom image input to detect logo present in the scene"""

# Read the scene image
scene_img = cv2.imread("scene_airport.jpg")
scene_image=cv2.resize(scene_image,(1012,812))
gallery =["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg"]
Sbucks_matcher = LogoMatcher(scene_img, gallery)
Sbucks_matcher.match_logo()

"""# I have captured the scene image at airport.Now checking the result of logo matching"""

# Read the scene image
scene_img = cv2.imread("Scene_custom.jpg")
scene_image=cv2.resize(scene_image,(1012,812))
gallery =["honda.jpg", "hp.jpg", "lg.jpg", "motorola.jpg", "pepsi.jpg",
                   "puma.jpg", "rolex.jpg", "starbucks.jpg", "toyota.jpg", "warnerbros.jpg","Indigo.png"]
Custom_matcher = LogoMatcher(scene_img, gallery)
Custom_matcher.match_logo()

